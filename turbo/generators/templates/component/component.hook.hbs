import { useMemo } from "react";
import type { ReactNode, ElementType } from "react";

import { createComponentProps } from "../../utils";

import {{camelCase name}}Variants from "./{{camelCase name}}.variants";
import type { {{pascalCase name}}VariantProps } from "./{{camelCase name}}.variants";

export interface Use{{pascalCase name}}Props extends {{pascalCase name}}VariantProps {
  children: ReactNode;
  className?: string;
  as?: ElementType;
}

const use{{pascalCase name}} = (props: Use{{pascalCase name}}Props) => {
  const { as = "{{elementType}}", className, children, ...otherProps } = props;

  const get{{pascalCase name}}Props = useMemo(
    () => () => {
      const variantClasses = {{camelCase name}}Variants({ ...otherProps });

      return createComponentProps({ variantClasses, otherProps, as, className });
    },
    [as, className, otherProps],
  );

  return {
    Component: as,
    children,
    get{{pascalCase name}}Props,
  };
};

export default use{{pascalCase name}};
