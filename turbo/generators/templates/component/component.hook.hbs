import { filterHTMLAttributes } from "@hikoui-beta/system";
import { twMerge } from "tailwind-merge";
import { useCallback, useMemo } from "react";
import type { ReactNode, ElementType } from "react";

import {{kebabCase name}}Variants from "./{{kebabCase name}}.variants";
import type { {{pascalCase name}}VariantProps } from "./{{kebabCase name}}.variants";

export interface Use{{pascalCase name}}Props extends {{pascalCase name}}VariantProps {
  children: ReactNode;
  className?: string;
  as?: ElementType;
}

const use{{pascalCase name}} = (props: Use{{pascalCase name}}Props) => {
  const { as = "span", className, children, ...otherProps } = props;

  const variantClasses = useMemo(() => {{kebabCase name}}Variants({ ...otherProps }), [otherProps]);
  const domProps = useMemo(() => filterHTMLAttributes(otherProps, as), [otherProps, as]);
  const mergedClassName = useMemo(() => twMerge(variantClasses, className), [variantClasses, className]);

  const get{{pascalCase name}}Props = useCallback(
    () => ({
      className: mergedClassName,
      ...domProps,
    }),
    [mergedClassName, domProps],
  );

  return {
    Component: as,
    children,
    get{{pascalCase name}}Props,
  };
};

export default use{{pascalCase name}};
